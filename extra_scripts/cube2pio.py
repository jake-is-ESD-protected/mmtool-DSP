import os
from os.path import join
import shutil
from typing import List

# Path to STM32CubeIDE project folder. Modify to match your path.
cube_path = "C:/Users/J/STM32CubeIDE/workspace_1.14.1/mmtool_stm32l4_dsp"

# Local path variables. Leave as is.
local_path = join("lib", "port")
main_path = "src"


def file_2_lines(path: str) -> List[str]:
    """
    Open a file located at `path` and return each line as a
    string in a list.
    """
    with open(path, "r") as f:
        lines = f.readlines()
    return lines


def lines_2_file(lines: List[str], save_path: str) -> None:
    """
    Create a file at `save_path` and write a list of strings `lines` 
    as lines into it.
    """
    with open(save_path, "w") as f:
        f.writelines(lines)


def line_insert_port(tag: str, content: List[str], insert: str) -> List[str]:
    """
    Insert a given string `insert` into a list of strings `content` after
    the entry `tag`.
    """
    lines = content
    lines_stripped = [line.strip() for line in content]
    i = lines_stripped.index(tag)
    lines.insert(i+1, insert)
    return lines


def line_extract(start: str, stop: str, content: List[str]) -> str:
    lines_stripped = [line.strip() for line in content]
    i_start = lines_stripped.index(start)
    i_stop = lines_stripped.index(stop)
    return "".join(content[i_start+1:i_stop])


def port_init():
    """
    Create a local file `src/main.c` if it doesn't already exist. It
    contains modifiable function definitions for `port_setup()` and
    `port_loop()`, which act similar to the Arduino FW. 
    """
    if not os.path.exists(join(main_path, "main.c")):
        content = """
#include "port.h"

void port_setup(void){

}

void port_loop(void){

}"""
        with open(join(main_path, "main.c"), "w") as f:
            f.write(content)

def port_copy():
    """
    Copy all project specific files from the STM32CubeIDE project
    to this PIO project. All files within the `Core/Src` and `Core/Inc`
    in STM32CubeIDE are copied to `lib/port`.
    """
    src_path = join(cube_path, "Core", "Src")
    inc_path = join(cube_path, "Core", "Inc")
    src_files = os.listdir(src_path)
    inc_files = os.listdir(inc_path)
    for s_f, i_f in zip(src_files, inc_files):
        shutil.copy(join(src_path, s_f), join(local_path, s_f))
        shutil.copy(join(inc_path, i_f), join(local_path, i_f))

def port_insert():
    """
    Open the `main.c` from STM32CubeIDE, insert needed lines and save it as
    `port.c` under `lib/port`. The added lines consist of an import of `port.h`,
    and calls to `port_setup()` before the main loop and `port_loop()` inbside
    of the infinite loop. It also extracts  the auto generated global variables 
    from the STM32CubeIDE project and add them to a newly generated `port.h` 
    inside of `lib/port` and expose them as `extern.` `port.h` also contains the
    function decalrations of `port_setup()` and `port_loop()` which are called in
    `lib/port/port.c` and defined in `src/main.c`. This function also discards
    `lib/port/main.c`, as it is no longer needed.

    NOTE (for developer):
    It appears that the source files usually found in `Core/Src` are not picked up
    by PIO if put into `lib/port`. The compiler does not warn about missing defs,
    which forces me to include them manually. This is very weird because it then
    doesn't make any sense where functions like `SysTick_Handler()` are registered,
    as I was unable to locate a `__weak` definition anywhere. For now, including
    them manually fixes the issue but is very weird and ugly.
    """
    port_c = join(local_path, "port.c")
    lines = file_2_lines(join(local_path, "main.c"))
    lines = line_insert_port("/* USER CODE BEGIN WHILE */",
                            lines,
                            "\tport_setup();\n")
    lines = line_insert_port("/* USER CODE END WHILE */",
                                lines,
                                "\t\tport_loop();")
    
    lines = line_insert_port('#include "main.h"',
                             lines,
                             '#include "port.h"')
    lines_2_file(lines, port_c)

    glob_vars = line_extract("/* Private variables ---------------------------------------------------------*/",
                             "/* USER CODE BEGIN PV */",
                             lines)
    head = """
/**
\t******************************************************************************
\t* @file       port.h
\t* @author     jake-is-ESD-protected
\t* @brief      IDE port file which makes code generated by the STM32CubeIDE
\t*             accessible to PIO
\t******************************************************************************
\t* @attention
\t* The ported code is fully contained in this files's parent folder and not 
\t* changed after the fact. This file replaces the `main.h` generated by the
\t* STM32CubeIDE.
\t******************************************************************************
*/

#ifndef __PORT_H
#define __PORT_H

#ifdef __cplusplus
extern "C" {
#endif

#include "stm32l4xx_hal.h"
#include "main.h"

/// @brief  Simpler user API for code before the main loop. Is always called after
///         every CubeMX function.
void port_setup(void);

/// @brief  Simpler user API for code inside the main loop. Is called on repeat in
///         the `while(1)` loop of the CubeMX code in `port.c`.
void port_loop(void);

/// @brief  export auto generated global variables from `main.c` (this part is also
///         auto generated)
"""

    tail = """
#ifdef __cplusplus
}
#endif

#endif /* __PORT_H */
"""

    with open(join(local_path, "port.h"), "w") as f:
        f.write(head.lstrip("\n") + glob_vars + tail)
    os.remove(join(local_path, "main.c"))


port_init()
port_copy()
port_insert()
